git flow / trunk-base 브랜치 전략
1. 브랜치 관리가 쉽다.
2. 팀원이 아무리 많아도 개발 절차가 매끄러워 진다.
3. 프로젝트 리더들이 알면 좋다.


## git flow
- 크게 5개의 브랜치 운영
    1. main branch
    2. develop branch (개발용)
    3. feature branch (develop에 기능 추가용)
    4. hotfix branch (main branch 버그 해결용)
    5. release branch (develop branch, main branch 합치기 전 최종 테스트 용)
장점 : 안정적으로 버전별 관리 가능
단점 : CI/CD 이런거 하는 곳은 안좋아 함

## git turnk-base
- main branch, 기능 추가용 feature branch 만 운영
    1. 기능 추가, 버그 픽스가 필요하면 main branch에서 새로운 branch를 만들어 코드 수정
    2. 기능 완성 시 main branch에 병합
    3. main branch에 있는 코드를 필요할 때 마다 유저들에게 배포
장점 : 
    1. 코드를 한 브랜치에서만 관리하기 때문에 편리하다.
    2. 크게 개발해서 한 번에 merge 하는 것 보다 작은 단위로 merge 하는 것이 더 안전하다.
단점 : 
    1. 메인 브랜치에 있는 코드가 뻑이나면 큰일이기 때문에 코드 리뷰를 자주 해야한다.
    2. 테스트를 자주하고 자동화 해놓은 곳들이 제대로 사용 가능하다.


## 결론
- 이미 어느정도 개발이 진척이 되었거나 프로 개발자들이 많은 팀이면 trunk-based가 편리하다.
- 최근 유행한 CI/CD 이런 식으로 개발하는 곳도 trunk-based 개발 방식을 적용한다.
- 출시된 버전의 안정성이 중요한 프로그램, 뼈대가 확실하지 않아 연구식으로 개발하는 프로그램은 git flow가 적절할 수 있다.

## merge
- 기록을 남겨야하는 중요한 브랜치를 merge할 경우 : 3-way merge.
- 기록을 남길 필요없는 쓸데없는 브랜치를 merge할 경우 : squash, rebase
