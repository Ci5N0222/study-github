merge

## 3-way merge
- 브랜치에 각각 신규 commit이 1회 이상 있는 경우
- merge 명령을 내리면 두 브랜치의 코드를 합쳐서 새로운 commit을 자동으로 생성
- merge의 기본 동작 방식
- 3-way merge는 branch가 많을 수록 복합하다.

## fast-forward
- 새로운 브랜치에만 commit이 있고 기준이 되는 브랜치에는 신규 commit이 없는 경우
- 이럴 경우 merge를 하면, "fast-forward merge"가 되었다고 알려준다.
- 딱히 합칠 내용이 없어서 신규브랜치를 메인브랜치라고 하는 것과 같다.
- fast-forward가 싫다면 `git merge --no-ff 브랜치명` 으로 강제  3-way merge할 수 있다.

## rebase and merge
- 브랜치의 시작점을 다른 commit으로 옮겨주는 행위
    1. rebase를 이용하여 신규브랜치의 시작점을 main브랜치 최근 commit으로 옮긴다
    2. fast-forward merge하는 방식
- why?
    1. 3-way merge 말고 강제로 fast-forward하고 싶을 때
    2. commit 내역을 한줄로 계속 이어서 남기고 싶을 경우
- how
    1. 신규 브랜치로 이동 (`git switch 새로운브랜치`)
    2. `git rebase main`
    3. 브랜치가 main브랜치 끝으로 이동 (`git switch main`)
    4. fast-forward merge (`git merge 새로운브랜치`)
- 단점
    - 브랜치끼리 차이가 너무 많은 경우 rebase하면 충돌이 많이 발생할 수 있음

## squash and merge
- 3-way merge 의 단점(branch의 수가 많을 수록 복잡) 보완
- 3-way merge 처럼 선으로 이어주지 않고 새브랜치에 있던 코드 변경사항이 main브랜치로 이동
- how
    1. `git switch main`
    2. `git merge --squash 브랜치명`
    3. `git commit -m '메세지'`

## `git branch -d 브랜치이름`
- merge가 완료된 브랜치 삭제

## `git branch -D 브랜치이름`
- merge가 완료되지 않은 브랜치 삭제